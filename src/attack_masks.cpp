/* attack_masks
* Contains attack mask data for each piece
* Theo Kanning 2/2/15
*/

#include "globals.h"





U64 kmask(int sq) {
	U64 result = 0ULL;
	int rk = sq / 8, fl = sq % 8;
	if (rk < RANK_8) result |= (1ULL << (sq + 8)); //Top
	if (rk < RANK_8 && fl < FILE_H) result |= (1ULL << (sq + 9)); //Top right
	if (fl < FILE_H) result |= (1ULL << (sq + 1)); //Right
	if (rk > RANK_1 && fl < FILE_H) result |= (1ULL << (sq - 7)); //Bottom Right
	if (rk > RANK_1) result |= (1ULL << (sq - 8)); //Bottom
	if (rk > RANK_1 && fl > FILE_A) result |= (1ULL << (sq - 9)); //Bottom Left
	if (fl > FILE_A) result |= (1ULL << (sq - 1)); //Left
	if (rk < RANK_8 && fl > FILE_A) result |= (1ULL << (sq + 7)); //Top Left
	return result;
}

U64 nmask(int sq) {
	/*
	*   0  15 0  17 0
	*   6  0  0  0 10
	*   0  0  0  0  0
	*  -10 0  0  0 -6
	*   0 -17 0 -15  0
	*/

	U64 result = 0ULL;
	int rk = sq / 8, fl = sq % 8;
	if (rk < RANK_7 && fl < FILE_H) result |= (1ULL << (sq + 17));
	if (rk < RANK_7 && fl > FILE_A) result |= (1ULL << (sq + 15));

	if (rk < RANK_8 && fl < FILE_G) result |= (1ULL << (sq + 10));
	if (rk < RANK_8 && fl > FILE_B) result |= (1ULL << (sq + 6));

	if (rk > RANK_1 && fl < FILE_G) result |= (1ULL << (sq - 6));
	if (rk > RANK_1 && fl > FILE_B) result |= (1ULL << (sq - 10));

	if (rk > RANK_2 && fl < FILE_H) result |= (1ULL << (sq - 15));
	if (rk > RANK_2 && fl > FILE_A) result |= (1ULL << (sq - 17));
	return result;
}

U64 wpmask(int sq)
{
	int rank = GET_RANK_64(sq);
	int file = GET_FILE_64(sq);
	U64 mask = 0i64;

	if (file > FILE_A) SET_BIT(mask, RANK_FILE_TO_SQUARE_64((rank + 1), (file - 1))); //left attack
	if (file < FILE_H) SET_BIT(mask, RANK_FILE_TO_SQUARE_64((rank + 1), (file + 1))); //right attack

	return mask;
}

U64 bpmask(int sq)
{
	int rank = GET_RANK_64(sq);
	int file = GET_FILE_64(sq);
	U64 mask = 0i64;

	if (file > FILE_A) SET_BIT(mask, RANK_FILE_TO_SQUARE_64((rank - 1), (file - 1))); //left attack
	if (file < FILE_H) SET_BIT(mask, RANK_FILE_TO_SQUARE_64((rank - 1), (file + 1))); //right attack

	return mask;
}

U64 rmask_full(int sq) {
	U64 result = 0i64;
	int rk = sq / 8, fl = sq % 8, r, f;
	for (r = rk + 1; r <= 7; r++) result |= (1ULL << (fl + r * 8));
	for (r = rk - 1; r >= 0; r--) result |= (1ULL << (fl + r * 8));
	for (f = fl + 1; f <= 7; f++) result |= (1ULL << (f + rk * 8));
	for (f = fl - 1; f >= 0; f--) result |= (1ULL << (f + rk * 8));
	return result;
}

U64 bmask_full(int sq) {
	U64 result = 0ULL;
	int rk = sq / 8, fl = sq % 8, r, f;
	for (r = rk + 1, f = fl + 1; r <= 7 && f <= 7; r++, f++) result |= (1ULL << (f + r * 8));
	for (r = rk + 1, f = fl - 1; r <= 7 && f >= 0; r++, f--) result |= (1ULL << (f + r * 8));
	for (r = rk - 1, f = fl + 1; r >= 0 && f <= 7; r--, f++) result |= (1ULL << (f + r * 8));
	for (r = rk - 1, f = fl - 1; r >= 0 && f >= 0; r--, f--) result |= (1ULL << (f + r * 8));
	return result;
}


void Generate_King_Knight_Attack_Masks(void)
{
	int square;
	printf("const U64 knight_attack_masks[64] = {\n");
	for (square = 0; square < 64; square++)
		printf("  0x%llxULL,\n", nmask(square));
	printf("};\n\n");

	printf("const U64 king_attack_masks[64] = {\n");
	for (square = 0; square < 64; square++)
		printf("  0x%llxULL,\n", kmask(square));
	printf("};\n\n");
}


void Generate_Pawn_Attack_Masks(void)
{
	int square;
	printf("const U64 wpawn_attack_masks[64] = {\n");
	for (square = 0; square < 64; square++)
		printf("  0x%llxULL,\n", wpmask(square));
	printf("};\n\n");

	printf("const U64 bpawn_attack_masks[64] = {\n");
	for (square = 0; square < 64; square++)
		printf("  0x%llxULL,\n", bpmask(square));
	printf("};\n\n");
}


void Generate_Rook_Bishop_Attack_Masks(void)
{
	int square;
	printf("const U64 rook_attack_masks[64] = {\n");
	for (square = 0; square < 64; square++)
		printf("  0x%llxULL,\n", rmask_full(square));
	printf("};\n\n");

	printf("const U64 bishop_attack_masks[64] = {\n");
	for (square = 0; square < 64; square++)
		printf("  0x%llxULL,\n", bmask_full(square));
	printf("};\n\n");
}

/***** Data *****/


const U64 knight_attack_masks[64] = {
	0x20400ULL,
	0x50800ULL,
	0xa1100ULL,
	0x142200ULL,
	0x284400ULL,
	0x508800ULL,
	0xa01000ULL,
	0x402000ULL,
	0x2040004ULL,
	0x5080008ULL,
	0xa110011ULL,
	0x14220022ULL,
	0x28440044ULL,
	0x50880088ULL,
	0xa0100010ULL,
	0x40200020ULL,
	0x204000402ULL,
	0x508000805ULL,
	0xa1100110aULL,
	0x1422002214ULL,
	0x2844004428ULL,
	0x5088008850ULL,
	0xa0100010a0ULL,
	0x4020002040ULL,
	0x20400040200ULL,
	0x50800080500ULL,
	0xa1100110a00ULL,
	0x142200221400ULL,
	0x284400442800ULL,
	0x508800885000ULL,
	0xa0100010a000ULL,
	0x402000204000ULL,
	0x2040004020000ULL,
	0x5080008050000ULL,
	0xa1100110a0000ULL,
	0x14220022140000ULL,
	0x28440044280000ULL,
	0x50880088500000ULL,
	0xa0100010a00000ULL,
	0x40200020400000ULL,
	0x204000402000000ULL,
	0x508000805000000ULL,
	0xa1100110a000000ULL,
	0x1422002214000000ULL,
	0x2844004428000000ULL,
	0x5088008850000000ULL,
	0xa0100010a0000000ULL,
	0x4020002040000000ULL,
	0x400040200000000ULL,
	0x800080500000000ULL,
	0x1100110a00000000ULL,
	0x2200221400000000ULL,
	0x4400442800000000ULL,
	0x8800885000000000ULL,
	0x100010a000000000ULL,
	0x2000204000000000ULL,
	0x4020000000000ULL,
	0x8050000000000ULL,
	0x110a0000000000ULL,
	0x22140000000000ULL,
	0x44280000000000ULL,
	0x88500000000000ULL,
	0x10a00000000000ULL,
	0x20400000000000ULL,
};

const U64 king_attack_masks[64] = {
	0x302ULL,
	0x705ULL,
	0xe0aULL,
	0x1c14ULL,
	0x3828ULL,
	0x7050ULL,
	0xe0a0ULL,
	0xc040ULL,
	0x30203ULL,
	0x70507ULL,
	0xe0a0eULL,
	0x1c141cULL,
	0x382838ULL,
	0x705070ULL,
	0xe0a0e0ULL,
	0xc040c0ULL,
	0x3020300ULL,
	0x7050700ULL,
	0xe0a0e00ULL,
	0x1c141c00ULL,
	0x38283800ULL,
	0x70507000ULL,
	0xe0a0e000ULL,
	0xc040c000ULL,
	0x302030000ULL,
	0x705070000ULL,
	0xe0a0e0000ULL,
	0x1c141c0000ULL,
	0x3828380000ULL,
	0x7050700000ULL,
	0xe0a0e00000ULL,
	0xc040c00000ULL,
	0x30203000000ULL,
	0x70507000000ULL,
	0xe0a0e000000ULL,
	0x1c141c000000ULL,
	0x382838000000ULL,
	0x705070000000ULL,
	0xe0a0e0000000ULL,
	0xc040c0000000ULL,
	0x3020300000000ULL,
	0x7050700000000ULL,
	0xe0a0e00000000ULL,
	0x1c141c00000000ULL,
	0x38283800000000ULL,
	0x70507000000000ULL,
	0xe0a0e000000000ULL,
	0xc040c000000000ULL,
	0x302030000000000ULL,
	0x705070000000000ULL,
	0xe0a0e0000000000ULL,
	0x1c141c0000000000ULL,
	0x3828380000000000ULL,
	0x7050700000000000ULL,
	0xe0a0e00000000000ULL,
	0xc040c00000000000ULL,
	0x203000000000000ULL,
	0x507000000000000ULL,
	0xa0e000000000000ULL,
	0x141c000000000000ULL,
	0x2838000000000000ULL,
	0x5070000000000000ULL,
	0xa0e0000000000000ULL,
	0x40c0000000000000ULL,
};

const U64 wpawn_attack_masks[64] = {
	0x200ULL,
	0x500ULL,
	0xa00ULL,
	0x1400ULL,
	0x2800ULL,
	0x5000ULL,
	0xa000ULL,
	0x4000ULL,
	0x20000ULL,
	0x50000ULL,
	0xa0000ULL,
	0x140000ULL,
	0x280000ULL,
	0x500000ULL,
	0xa00000ULL,
	0x400000ULL,
	0x2000000ULL,
	0x5000000ULL,
	0xa000000ULL,
	0x14000000ULL,
	0x28000000ULL,
	0x50000000ULL,
	0xa0000000ULL,
	0x40000000ULL,
	0x200000000ULL,
	0x500000000ULL,
	0xa00000000ULL,
	0x1400000000ULL,
	0x2800000000ULL,
	0x5000000000ULL,
	0xa000000000ULL,
	0x4000000000ULL,
	0x20000000000ULL,
	0x50000000000ULL,
	0xa0000000000ULL,
	0x140000000000ULL,
	0x280000000000ULL,
	0x500000000000ULL,
	0xa00000000000ULL,
	0x400000000000ULL,
	0x2000000000000ULL,
	0x5000000000000ULL,
	0xa000000000000ULL,
	0x14000000000000ULL,
	0x28000000000000ULL,
	0x50000000000000ULL,
	0xa0000000000000ULL,
	0x40000000000000ULL,
	0x200000000000000ULL,
	0x500000000000000ULL,
	0xa00000000000000ULL,
	0x1400000000000000ULL,
	0x2800000000000000ULL,
	0x5000000000000000ULL,
	0xa000000000000000ULL,
	0x4000000000000000ULL,
	0x0ULL,
	0x0ULL,
	0x0ULL,
	0x0ULL,
	0x0ULL,
	0x0ULL,
	0x0ULL,
	0x0ULL,
};

const U64 bpawn_attack_masks[64] = {
	0x0ULL,
	0x0ULL,
	0x0ULL,
	0x0ULL,
	0x0ULL,
	0x0ULL,
	0x0ULL,
	0x0ULL,
	0x2ULL,
	0x5ULL,
	0xaULL,
	0x14ULL,
	0x28ULL,
	0x50ULL,
	0xa0ULL,
	0x40ULL,
	0x200ULL,
	0x500ULL,
	0xa00ULL,
	0x1400ULL,
	0x2800ULL,
	0x5000ULL,
	0xa000ULL,
	0x4000ULL,
	0x20000ULL,
	0x50000ULL,
	0xa0000ULL,
	0x140000ULL,
	0x280000ULL,
	0x500000ULL,
	0xa00000ULL,
	0x400000ULL,
	0x2000000ULL,
	0x5000000ULL,
	0xa000000ULL,
	0x14000000ULL,
	0x28000000ULL,
	0x50000000ULL,
	0xa0000000ULL,
	0x40000000ULL,
	0x200000000ULL,
	0x500000000ULL,
	0xa00000000ULL,
	0x1400000000ULL,
	0x2800000000ULL,
	0x5000000000ULL,
	0xa000000000ULL,
	0x4000000000ULL,
	0x20000000000ULL,
	0x50000000000ULL,
	0xa0000000000ULL,
	0x140000000000ULL,
	0x280000000000ULL,
	0x500000000000ULL,
	0xa00000000000ULL,
	0x400000000000ULL,
	0x2000000000000ULL,
	0x5000000000000ULL,
	0xa000000000000ULL,
	0x14000000000000ULL,
	0x28000000000000ULL,
	0x50000000000000ULL,
	0xa0000000000000ULL,
	0x40000000000000ULL,
};
const U64 rook_attack_masks[64] = {
	0x1010101010101feULL,
	0x2020202020202fdULL,
	0x4040404040404fbULL,
	0x8080808080808f7ULL,
	0x10101010101010efULL,
	0x20202020202020dfULL,
	0x40404040404040bfULL,
	0x808080808080807fULL,
	0x10101010101fe01ULL,
	0x20202020202fd02ULL,
	0x40404040404fb04ULL,
	0x80808080808f708ULL,
	0x101010101010ef10ULL,
	0x202020202020df20ULL,
	0x404040404040bf40ULL,
	0x8080808080807f80ULL,
	0x101010101fe0101ULL,
	0x202020202fd0202ULL,
	0x404040404fb0404ULL,
	0x808080808f70808ULL,
	0x1010101010ef1010ULL,
	0x2020202020df2020ULL,
	0x4040404040bf4040ULL,
	0x80808080807f8080ULL,
	0x1010101fe010101ULL,
	0x2020202fd020202ULL,
	0x4040404fb040404ULL,
	0x8080808f7080808ULL,
	0x10101010ef101010ULL,
	0x20202020df202020ULL,
	0x40404040bf404040ULL,
	0x808080807f808080ULL,
	0x10101fe01010101ULL,
	0x20202fd02020202ULL,
	0x40404fb04040404ULL,
	0x80808f708080808ULL,
	0x101010ef10101010ULL,
	0x202020df20202020ULL,
	0x404040bf40404040ULL,
	0x8080807f80808080ULL,
	0x101fe0101010101ULL,
	0x202fd0202020202ULL,
	0x404fb0404040404ULL,
	0x808f70808080808ULL,
	0x1010ef1010101010ULL,
	0x2020df2020202020ULL,
	0x4040bf4040404040ULL,
	0x80807f8080808080ULL,
	0x1fe010101010101ULL,
	0x2fd020202020202ULL,
	0x4fb040404040404ULL,
	0x8f7080808080808ULL,
	0x10ef101010101010ULL,
	0x20df202020202020ULL,
	0x40bf404040404040ULL,
	0x807f808080808080ULL,
	0xfe01010101010101ULL,
	0xfd02020202020202ULL,
	0xfb04040404040404ULL,
	0xf708080808080808ULL,
	0xef10101010101010ULL,
	0xdf20202020202020ULL,
	0xbf40404040404040ULL,
	0x7f80808080808080ULL,
};

const U64 bishop_attack_masks[64] = {
	0x8040201008040200ULL,
	0x80402010080500ULL,
	0x804020110a00ULL,
	0x8041221400ULL,
	0x182442800ULL,
	0x10204885000ULL,
	0x102040810a000ULL,
	0x102040810204000ULL,
	0x4020100804020002ULL,
	0x8040201008050005ULL,
	0x804020110a000aULL,
	0x804122140014ULL,
	0x18244280028ULL,
	0x1020488500050ULL,
	0x102040810a000a0ULL,
	0x204081020400040ULL,
	0x2010080402000204ULL,
	0x4020100805000508ULL,
	0x804020110a000a11ULL,
	0x80412214001422ULL,
	0x1824428002844ULL,
	0x102048850005088ULL,
	0x2040810a000a010ULL,
	0x408102040004020ULL,
	0x1008040200020408ULL,
	0x2010080500050810ULL,
	0x4020110a000a1120ULL,
	0x8041221400142241ULL,
	0x182442800284482ULL,
	0x204885000508804ULL,
	0x40810a000a01008ULL,
	0x810204000402010ULL,
	0x804020002040810ULL,
	0x1008050005081020ULL,
	0x20110a000a112040ULL,
	0x4122140014224180ULL,
	0x8244280028448201ULL,
	0x488500050880402ULL,
	0x810a000a0100804ULL,
	0x1020400040201008ULL,
	0x402000204081020ULL,
	0x805000508102040ULL,
	0x110a000a11204080ULL,
	0x2214001422418000ULL,
	0x4428002844820100ULL,
	0x8850005088040201ULL,
	0x10a000a010080402ULL,
	0x2040004020100804ULL,
	0x200020408102040ULL,
	0x500050810204080ULL,
	0xa000a1120408000ULL,
	0x1400142241800000ULL,
	0x2800284482010000ULL,
	0x5000508804020100ULL,
	0xa000a01008040201ULL,
	0x4000402010080402ULL,
	0x2040810204080ULL,
	0x5081020408000ULL,
	0xa112040800000ULL,
	0x14224180000000ULL,
	0x28448201000000ULL,
	0x50880402010000ULL,
	0xa0100804020100ULL,
	0x40201008040201ULL,
};